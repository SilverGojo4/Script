#!/bin/zsh
#
# Please run "chmod +x ~/Script/zsh/create_project.sh"
# This script creates a project directory with predefined files.
#
# To make this script easily accessible via a simple command, you can add a function in your .zshrc file.
#
# Add the following to your .zshrc file:
# createproject() {
#     # Input Validation
#     if [ $# -lt 2 ]; then
#         echo "Usage: $0 /path/to/your/project yes|no"
#     fi
#     ~/Script/zsh/create_project.sh "$1" "$2"
# }
#
# After editing your .zshrc file, run 'source ~/.zshrc' to apply the changes.
#
# Usage: createproject /path/to/your/project yes

# Input Validation
if [ $# -lt 1 ]; then
	echo "Usage: $0 /path/to/your/project yes|no"
	exit 1
fi
if [ $# -ge 2 ] && [[ "$2" != "yes" && "$2" != "no" ]]; then
	echo "Error: The second argument must be 'yes' or 'no'."
	exit 1
fi

# Variable Assignment
directory=$1
create_readme=${2:-yes} # Default to 'yes' if not provided
gitignore_content='# Ignore files generated by Python compilation
__pycache__/
*.py[cod]
*.pyo
*.pyd
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
*.egg-info/
.installed.cfg
*.egg

# Ignore cache directories generated by pytest
.pytest_cache/

# Ignore files generated by Java compilation
*.class
# Directory containing class files
bin/
# Directories generated by package managers (e.g., Maven)
target/

# General ignore rules (log files, editor configurations, etc.)
*.log
*.tmp
*.temp
*.swp
*~
*.DS_Store

# Ignore VSCode personal settings
.vscode/'
readme_content="# $directory

A detailed introduction of $directory.

## Project Structure

The toolkit is organized as follows:

### folder_name/

- \`file_name\`: A simple introduction of file.

## Future Plans

- \`file_name\`: A simple introduction of file.

## Installation Requirements

To run the scripts, you'll need the following libraries installed:

- library_name"

# Error Handling: Check if the project directory exists
if [ ! -d "$directory" ]; then
	mkdir -p "$directory"
	echo "Created project $directory"
else
	echo "Error: $directory already exists."
	echo "Please check if a directory with a similar name (but different case) already exists."
	exit 1
fi

# Core Logic: Create the project directory and necessary files
create_project_directory() {

	# Create the project directory structure
	directories=(
		"$directory/configs"
		"$directory/src/main"
		"$directory/src/modules"
		"$directory/src/utils"
		"$directory/tests"
		"$directory/docs"
		"$directory/scripts"
		"$directory/data/raw"
		"$directory/data/processed"
		"$directory/logs"
		"$directory/results/figures"
		"$directory/results/reports"
		"$directory/models/saved_models"
		"$directory/models/model_configs"
	)

	for dir in "${directories[@]}"; do
		mkdir -p "$dir"
	done

	# Create .gitignore
	echo "$gitignore_content" >"$directory/.gitignore"
	echo "Created .gitignore"

	# Conditionally create README.md
	if [ "$create_readme" = "yes" ]; then
		echo "$readme_content" >"$directory/README.md"
		echo "Created README.md"
	else
		echo "README.md was not created (mode set to no)."
	fi
}

# Call the function
create_project_directory

# Completion Message
echo "$directory setup is complete for $(date +"%Y-%m-%d %H:%M:%S")"

# Exit Status
exit 0
